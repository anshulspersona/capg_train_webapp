env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

name: Java CI/CD with Maven

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: |
          mvn clean install
          mkdir artifacts && cp target/*.jar artifacts
          cd artifacts && ls

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # This is your SonarQube server URL (e.g., https://sonarcloud.io for SonarCloud)
        run: mvn clean install sonar:sonar

      - name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-action-artifact
          path: artifacts

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/capg_train_webapp:latest .

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to GHCR
        run: docker push ghcr.io/${{ github.repository_owner }}/capg_train_webapp:latest

  deploy-image-to-ec2:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: github-action-artifact

      - name: Deploy Docker image to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > id_rsa
          chmod 600 id_rsa
          ssh -i id_rsa -o StrictHostKeyChecking=no ec2-user@3.231.87.136 << 'EOF'
            # Log in to Docker registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull the Docker image
            docker pull ghcr.io/${{ github.repository_owner }}/capg_train_webapp:latest

            # Stop and remove the existing container if it exists
            docker stop capg_train_webapp || true
            docker rm capg_train_webapp || true

            # Run the new container
            docker run -d --name capg_train_webapp -p 8080:8080 ghcr.io/${{ github.repository_owner }}/capg_train_webapp:latest
          EOF

      # Define success outcome
      - name: Set outcome on success
        if: success()
        run: echo "OUTCOME=Success" >> $GITHUB_ENV

      # Define failure outcome
      - name: Set outcome on failure
        if: failure()
        run: echo "OUTCOME=Failure" >> $GITHUB_ENV

      # Send email notification with dynamic outcome
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Build ${{ env.OUTCOME }}: ${{ github.repository }}"
          body: |
            The build for repository ${{ github.repository }} was ${{ env.OUTCOME }}!
            Commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
            Job: ${{ github.job }}
          to: "refodo7240@nastyx.com"
          from: ${{ secrets.SMTP_USERNAME }}
